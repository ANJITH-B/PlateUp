'use client'
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";

export function Staff(props) {
    const { animation, section } = props;
    const { nodes, materials } = useGLTF('/models/Staf.glb')
    const group = useRef();

    const { animations: sittingAnimation } = useFBX('animations/Sitting.fbx');
    const { animations: standingAnimation } = useFBX("animations/Standing Idle.fbx");
    const { animations: sillingAnimation } = useFBX("animations/Texting While Standing.fbx");

    sittingAnimation[0].name = "Sitting";
    standingAnimation[0].name = "Standing";
    sillingAnimation[0].name = "Billing";

    const { actions } = useAnimations(
        [sittingAnimation[0], standingAnimation[0], sillingAnimation[0]],
        group
    );

    useEffect(() => {
        console.log("Actions:", actions);
        console.log("Animation:", animation);
        console.log("Animation:", actions[animation]);
        if (actions[animation]) {
            actions[animation].reset().fadeIn(0).play();
        } else {
            console.error(`Animation '${animation}' not found.`);
        }
        return () => {
            if (actions[animation]) {
                actions[animation].reset().fadeOut(0);
            }
        };
    }, [actions, animation]);

    return (
        <group {...props} ref={group} dispose={null}>
            <primitive object={nodes.Hips} />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
            <skinnedMesh
                geometry={nodes['hair-60'].geometry}
                material={materials.M_Hair_60}
                skeleton={nodes['hair-60'].skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials.Wolf3D_Outfit_Bottom}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
            />
        </group>
    )
}

useGLTF.preload('/models/Staf.glb')
